// Mocks generated by Mockito 5.4.4 from annotations
// in ingredients_scanner/test/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;
import 'dart:typed_data' as _i41;

import 'package:cloud_firestore/cloud_firestore.dart' as _i8;
import 'package:dartz/dartz.dart' as _i2;
import 'package:firebase_auth/firebase_auth.dart' as _i4;
import 'package:firebase_core/firebase_core.dart' as _i12;
import 'package:ingredients_scanner/core/error/failures.dart' as _i14;
import 'package:ingredients_scanner/core/network/network_info.dart' as _i40;
import 'package:ingredients_scanner/core/usecase/usecase.dart' as _i23;
import 'package:ingredients_scanner/features/authentication/data/data_sources/auth_remote_data_source.dart'
    as _i17;
import 'package:ingredients_scanner/features/authentication/data/models/sign_in_model.dart'
    as _i19;
import 'package:ingredients_scanner/features/authentication/data/models/sign_up_model.dart'
    as _i18;
import 'package:ingredients_scanner/features/authentication/domain/entities/first_page_entity.dart'
    as _i3;
import 'package:ingredients_scanner/features/authentication/domain/entities/sign_in_entity.dart'
    as _i15;
import 'package:ingredients_scanner/features/authentication/domain/entities/sign_up_entity.dart'
    as _i16;
import 'package:ingredients_scanner/features/authentication/domain/repositories/authentication_repository.dart'
    as _i5;
import 'package:ingredients_scanner/features/authentication/domain/usecases/check_verification_usecase.dart'
    as _i26;
import 'package:ingredients_scanner/features/authentication/domain/usecases/first_page_usecase.dart'
    as _i25;
import 'package:ingredients_scanner/features/authentication/domain/usecases/google_auth_usecase.dart'
    as _i27;
import 'package:ingredients_scanner/features/authentication/domain/usecases/logout_usecase.dart'
    as _i24;
import 'package:ingredients_scanner/features/authentication/domain/usecases/sign_in_usecase.dart'
    as _i20;
import 'package:ingredients_scanner/features/authentication/domain/usecases/sign_up_usecase.dart'
    as _i21;
import 'package:ingredients_scanner/features/authentication/domain/usecases/verifiy_email_usecase.dart'
    as _i22;
import 'package:ingredients_scanner/features/food_preferences/data/datasources/local/local_food_preferences_data_source.dart'
    as _i35;
import 'package:ingredients_scanner/features/food_preferences/data/datasources/remote/remote_food_preference_data_source.dart'
    as _i34;
import 'package:ingredients_scanner/features/food_preferences/data/models/food_preferences_model.dart'
    as _i9;
import 'package:ingredients_scanner/features/food_preferences/domain/entities/food_preferences_entity.dart'
    as _i33;
import 'package:ingredients_scanner/features/food_preferences/domain/repositories/food_preferences_repository.dart'
    as _i11;
import 'package:ingredients_scanner/features/food_preferences/domain/usecases/get_food_preferences_usecase.dart'
    as _i36;
import 'package:ingredients_scanner/features/food_preferences/domain/usecases/params/food_preferences_params.dart'
    as _i38;
import 'package:ingredients_scanner/features/food_preferences/domain/usecases/update_food_preferences.dart'
    as _i37;
import 'package:ingredients_scanner/features/user_preferences/data/data_sources/user_preferences_data_source.dart'
    as _i29;
import 'package:ingredients_scanner/features/user_preferences/data/models/user_preferences_model.dart'
    as _i6;
import 'package:ingredients_scanner/features/user_preferences/domain/entities/user_preferences_entity.dart'
    as _i28;
import 'package:ingredients_scanner/features/user_preferences/domain/repositories/user_preferences_repositiory.dart'
    as _i7;
import 'package:ingredients_scanner/features/user_preferences/domain/usecases/get_user_preference.dart'
    as _i30;
import 'package:ingredients_scanner/features/user_preferences/domain/usecases/params/user_preferences_params.dart'
    as _i32;
import 'package:ingredients_scanner/features/user_preferences/domain/usecases/update_user_preferences.dart'
    as _i31;
import 'package:internet_connection_checker_plus/internet_connection_checker_plus.dart'
    as _i42;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i39;
import 'package:shared_preferences/shared_preferences.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirstPageEntity_1 extends _i1.SmartFake
    implements _i3.FirstPageEntity {
  _FakeFirstPageEntity_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserCredential_2 extends _i1.SmartFake
    implements _i4.UserCredential {
  _FakeUserCredential_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUnit_3 extends _i1.SmartFake implements _i2.Unit {
  _FakeUnit_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthenticationRepository_4 extends _i1.SmartFake
    implements _i5.AuthenticationRepository {
  _FakeAuthenticationRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserPreferencesModel_5 extends _i1.SmartFake
    implements _i6.UserPreferencesModel {
  _FakeUserPreferencesModel_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserPreferencesRepository_6 extends _i1.SmartFake
    implements _i7.UserPreferencesRepository {
  _FakeUserPreferencesRepository_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFirestore_7 extends _i1.SmartFake
    implements _i8.FirebaseFirestore {
  _FakeFirebaseFirestore_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFoodPreferencesModel_8 extends _i1.SmartFake
    implements _i9.FoodPreferencesModel {
  _FakeFoodPreferencesModel_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferences_9 extends _i1.SmartFake
    implements _i10.SharedPreferences {
  _FakeSharedPreferences_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFoodPreferencesRepository_10 extends _i1.SmartFake
    implements _i11.FoodPreferencesRepository {
  _FakeFoodPreferencesRepository_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentReference_11<T1 extends Object?> extends _i1.SmartFake
    implements _i8.DocumentReference<T1> {
  _FakeDocumentReference_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionReference_12<T1 extends Object?> extends _i1.SmartFake
    implements _i8.CollectionReference<T1> {
  _FakeCollectionReference_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuery_13<T1 extends Object?> extends _i1.SmartFake
    implements _i8.Query<T1> {
  _FakeQuery_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuerySnapshot_14<T1 extends Object?> extends _i1.SmartFake
    implements _i8.QuerySnapshot<T1> {
  _FakeQuerySnapshot_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAggregateQuery_15 extends _i1.SmartFake
    implements _i8.AggregateQuery {
  _FakeAggregateQuery_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseApp_16 extends _i1.SmartFake implements _i12.FirebaseApp {
  _FakeFirebaseApp_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSettings_17 extends _i1.SmartFake implements _i8.Settings {
  _FakeSettings_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWriteBatch_18 extends _i1.SmartFake implements _i8.WriteBatch {
  _FakeWriteBatch_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoadBundleTask_19 extends _i1.SmartFake
    implements _i8.LoadBundleTask {
  _FakeLoadBundleTask_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_20<T1> extends _i1.SmartFake implements _i13.Future<T1> {
  _FakeFuture_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_21 extends _i1.SmartFake implements Duration {
  _FakeDuration_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepository extends _i1.Mock
    implements _i5.AuthenticationRepository {
  MockAuthenticationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>> signIn(
          _i15.SignInEntity? signIn) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [signIn],
        ),
        returnValue:
            _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>>.value(
                _FakeEither_0<_i14.Failure, _i4.UserCredential>(
          this,
          Invocation.method(
            #signIn,
            [signIn],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>>);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>> signUp(
          _i16.SignUpEntity? signUp) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [signUp],
        ),
        returnValue:
            _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>>.value(
                _FakeEither_0<_i14.Failure, _i4.UserCredential>(
          this,
          Invocation.method(
            #signUp,
            [signUp],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>>);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>> googleSignIn() =>
      (super.noSuchMethod(
        Invocation.method(
          #googleSignIn,
          [],
        ),
        returnValue:
            _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>>.value(
                _FakeEither_0<_i14.Failure, _i4.UserCredential>(
          this,
          Invocation.method(
            #googleSignIn,
            [],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>>);

  @override
  _i3.FirstPageEntity firstPage() => (super.noSuchMethod(
        Invocation.method(
          #firstPage,
          [],
        ),
        returnValue: _FakeFirstPageEntity_1(
          this,
          Invocation.method(
            #firstPage,
            [],
          ),
        ),
      ) as _i3.FirstPageEntity);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>> verifyEmail() =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyEmail,
          [],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i14.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #verifyEmail,
            [],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>> checkEmailVerification(
          _i13.Completer<dynamic>? completer) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkEmailVerification,
          [completer],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i14.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #checkEmailVerification,
            [completer],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>> logOut() =>
      (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i14.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>);
}

/// A class which mocks [UserCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCredential extends _i1.Mock implements _i4.UserCredential {
  MockUserCredential() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i17.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i4.UserCredential> signUp(_i18.SignUpModel? signUp) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [signUp],
        ),
        returnValue:
            _i13.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signUp,
            [signUp],
          ),
        )),
      ) as _i13.Future<_i4.UserCredential>);

  @override
  _i13.Future<_i4.UserCredential> signIn(_i19.SignInModel? signIn) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [signIn],
        ),
        returnValue:
            _i13.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signIn,
            [signIn],
          ),
        )),
      ) as _i13.Future<_i4.UserCredential>);

  @override
  _i13.Future<_i4.UserCredential> googleAuthentication() => (super.noSuchMethod(
        Invocation.method(
          #googleAuthentication,
          [],
        ),
        returnValue:
            _i13.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #googleAuthentication,
            [],
          ),
        )),
      ) as _i13.Future<_i4.UserCredential>);

  @override
  _i13.Future<_i2.Unit> verifyEmail() => (super.noSuchMethod(
        Invocation.method(
          #verifyEmail,
          [],
        ),
        returnValue: _i13.Future<_i2.Unit>.value(_FakeUnit_3(
          this,
          Invocation.method(
            #verifyEmail,
            [],
          ),
        )),
      ) as _i13.Future<_i2.Unit>);
}

/// A class which mocks [SignInUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInUseCase extends _i1.Mock implements _i20.SignInUseCase {
  MockSignInUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AuthenticationRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthenticationRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.AuthenticationRepository);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>> call(
          _i15.SignInEntity? signIn) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [signIn],
        ),
        returnValue:
            _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>>.value(
                _FakeEither_0<_i14.Failure, _i4.UserCredential>(
          this,
          Invocation.method(
            #call,
            [signIn],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>>);
}

/// A class which mocks [SignUpUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignUpUseCase extends _i1.Mock implements _i21.SignUpUseCase {
  MockSignUpUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AuthenticationRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthenticationRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.AuthenticationRepository);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>> call(
          _i16.SignUpEntity? signup) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [signup],
        ),
        returnValue:
            _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>>.value(
                _FakeEither_0<_i14.Failure, _i4.UserCredential>(
          this,
          Invocation.method(
            #call,
            [signup],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>>);
}

/// A class which mocks [VerifyEmailUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockVerifyEmailUseCase extends _i1.Mock
    implements _i22.VerifyEmailUseCase {
  MockVerifyEmailUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AuthenticationRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthenticationRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.AuthenticationRepository);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>> call(_i23.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i14.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>);
}

/// A class which mocks [LogOutUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogOutUseCase extends _i1.Mock implements _i24.LogOutUseCase {
  MockLogOutUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AuthenticationRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthenticationRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.AuthenticationRepository);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>> call(_i23.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i14.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>);
}

/// A class which mocks [FirstPageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirstPageUseCase extends _i1.Mock implements _i25.FirstPageUseCase {
  MockFirstPageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AuthenticationRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthenticationRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.AuthenticationRepository);

  @override
  _i3.FirstPageEntity call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _FakeFirstPageEntity_1(
          this,
          Invocation.method(
            #call,
            [],
          ),
        ),
      ) as _i3.FirstPageEntity);
}

/// A class which mocks [CheckVerificationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckVerificationUseCase extends _i1.Mock
    implements _i26.CheckVerificationUseCase {
  MockCheckVerificationUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AuthenticationRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthenticationRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.AuthenticationRepository);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>> call(
          _i13.Completer<dynamic>? completer) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [completer],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i14.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [completer],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>);
}

/// A class which mocks [GoogleAuthUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleAuthUseCase extends _i1.Mock implements _i27.GoogleAuthUseCase {
  MockGoogleAuthUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AuthenticationRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthenticationRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.AuthenticationRepository);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>> call(
          _i23.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>>.value(
                _FakeEither_0<_i14.Failure, _i4.UserCredential>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i4.UserCredential>>);
}

/// A class which mocks [UserPreferencesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserPreferencesRepository extends _i1.Mock
    implements _i7.UserPreferencesRepository {
  MockUserPreferencesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i28.UserPreferencesEntity>>
      getUserPreferences() => (super.noSuchMethod(
            Invocation.method(
              #getUserPreferences,
              [],
            ),
            returnValue: _i13.Future<
                    _i2.Either<_i14.Failure, _i28.UserPreferencesEntity>>.value(
                _FakeEither_0<_i14.Failure, _i28.UserPreferencesEntity>(
              this,
              Invocation.method(
                #getUserPreferences,
                [],
              ),
            )),
          ) as _i13
              .Future<_i2.Either<_i14.Failure, _i28.UserPreferencesEntity>>);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>> updateUserPreferences(
          _i6.UserPreferencesModel? userPreferencesModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserPreferences,
          [userPreferencesModel],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i14.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateUserPreferences,
            [userPreferencesModel],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>);
}

/// A class which mocks [UserPreferencesDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserPreferencesDataSource extends _i1.Mock
    implements _i29.UserPreferencesDataSource {
  MockUserPreferencesDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i6.UserPreferencesModel> getUserPreferences() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserPreferences,
          [],
        ),
        returnValue: _i13.Future<_i6.UserPreferencesModel>.value(
            _FakeUserPreferencesModel_5(
          this,
          Invocation.method(
            #getUserPreferences,
            [],
          ),
        )),
      ) as _i13.Future<_i6.UserPreferencesModel>);

  @override
  _i13.Future<_i2.Unit> updateUserPreferences(
          _i6.UserPreferencesModel? userPreferencesModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserPreferences,
          [userPreferencesModel],
        ),
        returnValue: _i13.Future<_i2.Unit>.value(_FakeUnit_3(
          this,
          Invocation.method(
            #updateUserPreferences,
            [userPreferencesModel],
          ),
        )),
      ) as _i13.Future<_i2.Unit>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i10.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i13.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [GetUserPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserPreferences extends _i1.Mock
    implements _i30.GetUserPreferences {
  MockGetUserPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.UserPreferencesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserPreferencesRepository_6(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i7.UserPreferencesRepository);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i28.UserPreferencesEntity>> call(
          _i23.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i13
            .Future<_i2.Either<_i14.Failure, _i28.UserPreferencesEntity>>.value(
            _FakeEither_0<_i14.Failure, _i28.UserPreferencesEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i28.UserPreferencesEntity>>);
}

/// A class which mocks [UpdateUserPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateUserPreferences extends _i1.Mock
    implements _i31.UpdateUserPreferences {
  MockUpdateUserPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.UserPreferencesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserPreferencesRepository_6(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i7.UserPreferencesRepository);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>> call(
          _i32.UserPreferencesParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i14.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>);
}

/// A class which mocks [FoodPreferencesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodPreferencesRepository extends _i1.Mock
    implements _i11.FoodPreferencesRepository {
  MockFoodPreferencesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i33.FoodPreferencesEntity>>
      getFoodPreference() => (super.noSuchMethod(
            Invocation.method(
              #getFoodPreference,
              [],
            ),
            returnValue: _i13.Future<
                    _i2.Either<_i14.Failure, _i33.FoodPreferencesEntity>>.value(
                _FakeEither_0<_i14.Failure, _i33.FoodPreferencesEntity>(
              this,
              Invocation.method(
                #getFoodPreference,
                [],
              ),
            )),
          ) as _i13
              .Future<_i2.Either<_i14.Failure, _i33.FoodPreferencesEntity>>);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>> updateFoodPreference(
          _i9.FoodPreferencesModel? foodPreferencesModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFoodPreference,
          [foodPreferencesModel],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i14.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateFoodPreference,
            [foodPreferencesModel],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>);
}

/// A class which mocks [RemoteFoodPreferencesDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteFoodPreferencesDataSourceImpl extends _i1.Mock
    implements _i34.RemoteFoodPreferencesDataSourceImpl {
  MockRemoteFoodPreferencesDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.FirebaseFirestore get instance => (super.noSuchMethod(
        Invocation.getter(#instance),
        returnValue: _FakeFirebaseFirestore_7(
          this,
          Invocation.getter(#instance),
        ),
      ) as _i8.FirebaseFirestore);

  @override
  _i13.Future<_i9.FoodPreferencesModel> getFoodPreferences() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFoodPreferences,
          [],
        ),
        returnValue: _i13.Future<_i9.FoodPreferencesModel>.value(
            _FakeFoodPreferencesModel_8(
          this,
          Invocation.method(
            #getFoodPreferences,
            [],
          ),
        )),
      ) as _i13.Future<_i9.FoodPreferencesModel>);

  @override
  _i13.Future<_i2.Unit> updateFoodPreferences(
          _i9.FoodPreferencesModel? foodPreferencesModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFoodPreferences,
          [foodPreferencesModel],
        ),
        returnValue: _i13.Future<_i2.Unit>.value(_FakeUnit_3(
          this,
          Invocation.method(
            #updateFoodPreferences,
            [foodPreferencesModel],
          ),
        )),
      ) as _i13.Future<_i2.Unit>);
}

/// A class which mocks [LocalFoodPreferencesDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalFoodPreferencesDataSourceImpl extends _i1.Mock
    implements _i35.LocalFoodPreferencesDataSourceImpl {
  MockLocalFoodPreferencesDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.SharedPreferences get sharedPreferences => (super.noSuchMethod(
        Invocation.getter(#sharedPreferences),
        returnValue: _FakeSharedPreferences_9(
          this,
          Invocation.getter(#sharedPreferences),
        ),
      ) as _i10.SharedPreferences);

  @override
  _i13.Future<_i9.FoodPreferencesModel> getFoodPreferences() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFoodPreferences,
          [],
        ),
        returnValue: _i13.Future<_i9.FoodPreferencesModel>.value(
            _FakeFoodPreferencesModel_8(
          this,
          Invocation.method(
            #getFoodPreferences,
            [],
          ),
        )),
      ) as _i13.Future<_i9.FoodPreferencesModel>);

  @override
  _i13.Future<_i2.Unit> updateFoodPreferences(
          _i9.FoodPreferencesModel? foodPreferencesModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFoodPreferences,
          [foodPreferencesModel],
        ),
        returnValue: _i13.Future<_i2.Unit>.value(_FakeUnit_3(
          this,
          Invocation.method(
            #updateFoodPreferences,
            [foodPreferencesModel],
          ),
        )),
      ) as _i13.Future<_i2.Unit>);
}

/// A class which mocks [GetFoodPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFoodPreferences extends _i1.Mock
    implements _i36.GetFoodPreferences {
  MockGetFoodPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.FoodPreferencesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeFoodPreferencesRepository_10(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i11.FoodPreferencesRepository);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i33.FoodPreferencesEntity>> call(
          _i23.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i13
            .Future<_i2.Either<_i14.Failure, _i33.FoodPreferencesEntity>>.value(
            _FakeEither_0<_i14.Failure, _i33.FoodPreferencesEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i33.FoodPreferencesEntity>>);
}

/// A class which mocks [UpdateFoodPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateFoodPreferences extends _i1.Mock
    implements _i37.UpdateFoodPreferences {
  MockUpdateFoodPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.FoodPreferencesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeFoodPreferencesRepository_10(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i11.FoodPreferencesRepository);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>> call(
          _i38.FoodPreferencesParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i14.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i2.Unit>>);
}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionReference<T extends Object?> extends _i1.Mock
    implements _i8.CollectionReference<T> {
  MockCollectionReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i39.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i39.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i8.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_7(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i8.FirebaseFirestore);

  @override
  Map<String, dynamic> get parameters => (super.noSuchMethod(
        Invocation.getter(#parameters),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i13.Future<_i8.DocumentReference<T>> add(T? data) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValue: _i13.Future<_i8.DocumentReference<T>>.value(
            _FakeDocumentReference_11<T>(
          this,
          Invocation.method(
            #add,
            [data],
          ),
        )),
      ) as _i13.Future<_i8.DocumentReference<T>>);

  @override
  _i8.DocumentReference<T> doc([String? path]) => (super.noSuchMethod(
        Invocation.method(
          #doc,
          [path],
        ),
        returnValue: _FakeDocumentReference_11<T>(
          this,
          Invocation.method(
            #doc,
            [path],
          ),
        ),
      ) as _i8.DocumentReference<T>);

  @override
  _i8.CollectionReference<R> withConverter<R extends Object?>({
    required _i8.FromFirestore<R>? fromFirestore,
    required _i8.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [],
          {
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _FakeCollectionReference_12<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
      ) as _i8.CollectionReference<R>);

  @override
  _i8.Query<T> endAtDocument(_i8.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #endAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i8.Query<T>);

  @override
  _i8.Query<T> endAt(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #endAt,
          [values],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #endAt,
            [values],
          ),
        ),
      ) as _i8.Query<T>);

  @override
  _i8.Query<T> endBeforeDocument(
          _i8.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endBeforeDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #endBeforeDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i8.Query<T>);

  @override
  _i8.Query<T> endBefore(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #endBefore,
          [values],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #endBefore,
            [values],
          ),
        ),
      ) as _i8.Query<T>);

  @override
  _i13.Future<_i8.QuerySnapshot<T>> get([_i8.GetOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [options],
        ),
        returnValue:
            _i13.Future<_i8.QuerySnapshot<T>>.value(_FakeQuerySnapshot_14<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
      ) as _i13.Future<_i8.QuerySnapshot<T>>);

  @override
  _i8.Query<T> limit(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limit,
          [limit],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #limit,
            [limit],
          ),
        ),
      ) as _i8.Query<T>);

  @override
  _i8.Query<T> limitToLast(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToLast,
          [limit],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
      ) as _i8.Query<T>);

  @override
  _i13.Stream<_i8.QuerySnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #snapshots,
          [],
          {#includeMetadataChanges: includeMetadataChanges},
        ),
        returnValue: _i13.Stream<_i8.QuerySnapshot<T>>.empty(),
      ) as _i13.Stream<_i8.QuerySnapshot<T>>);

  @override
  _i8.Query<T> orderBy(
    Object? field, {
    bool? descending = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #orderBy,
          [field],
          {#descending: descending},
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #orderBy,
            [field],
            {#descending: descending},
          ),
        ),
      ) as _i8.Query<T>);

  @override
  _i8.Query<T> startAfterDocument(
          _i8.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAfterDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #startAfterDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i8.Query<T>);

  @override
  _i8.Query<T> startAfter(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #startAfter,
          [values],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #startAfter,
            [values],
          ),
        ),
      ) as _i8.Query<T>);

  @override
  _i8.Query<T> startAtDocument(
          _i8.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #startAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i8.Query<T>);

  @override
  _i8.Query<T> startAt(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #startAt,
          [values],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #startAt,
            [values],
          ),
        ),
      ) as _i8.Query<T>);

  @override
  _i8.Query<T> where(
    Object? field, {
    Object? isEqualTo,
    Object? isNotEqualTo,
    Object? isLessThan,
    Object? isLessThanOrEqualTo,
    Object? isGreaterThan,
    Object? isGreaterThanOrEqualTo,
    Object? arrayContains,
    Iterable<Object?>? arrayContainsAny,
    Iterable<Object?>? whereIn,
    Iterable<Object?>? whereNotIn,
    bool? isNull,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [field],
          {
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull,
          },
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #where,
            [field],
            {
              #isEqualTo: isEqualTo,
              #isNotEqualTo: isNotEqualTo,
              #isLessThan: isLessThan,
              #isLessThanOrEqualTo: isLessThanOrEqualTo,
              #isGreaterThan: isGreaterThan,
              #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
              #arrayContains: arrayContains,
              #arrayContainsAny: arrayContainsAny,
              #whereIn: whereIn,
              #whereNotIn: whereNotIn,
              #isNull: isNull,
            },
          ),
        ),
      ) as _i8.Query<T>);

  @override
  _i8.AggregateQuery count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _FakeAggregateQuery_15(
          this,
          Invocation.method(
            #count,
            [],
          ),
        ),
      ) as _i8.AggregateQuery);

  @override
  _i8.AggregateQuery aggregate(
    _i8.AggregateField? aggregateField1, [
    _i8.AggregateField? aggregateField2,
    _i8.AggregateField? aggregateField3,
    _i8.AggregateField? aggregateField4,
    _i8.AggregateField? aggregateField5,
    _i8.AggregateField? aggregateField6,
    _i8.AggregateField? aggregateField7,
    _i8.AggregateField? aggregateField8,
    _i8.AggregateField? aggregateField9,
    _i8.AggregateField? aggregateField10,
    _i8.AggregateField? aggregateField11,
    _i8.AggregateField? aggregateField12,
    _i8.AggregateField? aggregateField13,
    _i8.AggregateField? aggregateField14,
    _i8.AggregateField? aggregateField15,
    _i8.AggregateField? aggregateField16,
    _i8.AggregateField? aggregateField17,
    _i8.AggregateField? aggregateField18,
    _i8.AggregateField? aggregateField19,
    _i8.AggregateField? aggregateField20,
    _i8.AggregateField? aggregateField21,
    _i8.AggregateField? aggregateField22,
    _i8.AggregateField? aggregateField23,
    _i8.AggregateField? aggregateField24,
    _i8.AggregateField? aggregateField25,
    _i8.AggregateField? aggregateField26,
    _i8.AggregateField? aggregateField27,
    _i8.AggregateField? aggregateField28,
    _i8.AggregateField? aggregateField29,
    _i8.AggregateField? aggregateField30,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #aggregate,
          [
            aggregateField1,
            aggregateField2,
            aggregateField3,
            aggregateField4,
            aggregateField5,
            aggregateField6,
            aggregateField7,
            aggregateField8,
            aggregateField9,
            aggregateField10,
            aggregateField11,
            aggregateField12,
            aggregateField13,
            aggregateField14,
            aggregateField15,
            aggregateField16,
            aggregateField17,
            aggregateField18,
            aggregateField19,
            aggregateField20,
            aggregateField21,
            aggregateField22,
            aggregateField23,
            aggregateField24,
            aggregateField25,
            aggregateField26,
            aggregateField27,
            aggregateField28,
            aggregateField29,
            aggregateField30,
          ],
        ),
        returnValue: _FakeAggregateQuery_15(
          this,
          Invocation.method(
            #aggregate,
            [
              aggregateField1,
              aggregateField2,
              aggregateField3,
              aggregateField4,
              aggregateField5,
              aggregateField6,
              aggregateField7,
              aggregateField8,
              aggregateField9,
              aggregateField10,
              aggregateField11,
              aggregateField12,
              aggregateField13,
              aggregateField14,
              aggregateField15,
              aggregateField16,
              aggregateField17,
              aggregateField18,
              aggregateField19,
              aggregateField20,
              aggregateField21,
              aggregateField22,
              aggregateField23,
              aggregateField24,
              aggregateField25,
              aggregateField26,
              aggregateField27,
              aggregateField28,
              aggregateField29,
              aggregateField30,
            ],
          ),
        ),
      ) as _i8.AggregateQuery);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i40.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i8.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_16(
          this,
          Invocation.getter(#app),
        ),
      ) as _i12.FirebaseApp);

  @override
  set app(_i12.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get databaseURL => (super.noSuchMethod(
        Invocation.getter(#databaseURL),
        returnValue: _i39.dummyValue<String>(
          this,
          Invocation.getter(#databaseURL),
        ),
      ) as String);

  @override
  set databaseURL(String? _databaseURL) => super.noSuchMethod(
        Invocation.setter(
          #databaseURL,
          _databaseURL,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set settings(_i8.Settings? settings) => super.noSuchMethod(
        Invocation.setter(
          #settings,
          settings,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Settings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeSettings_17(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i8.Settings);

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i8.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collection,
          [collectionPath],
        ),
        returnValue: _FakeCollectionReference_12<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
      ) as _i8.CollectionReference<Map<String, dynamic>>);

  @override
  _i8.WriteBatch batch() => (super.noSuchMethod(
        Invocation.method(
          #batch,
          [],
        ),
        returnValue: _FakeWriteBatch_18(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
      ) as _i8.WriteBatch);

  @override
  _i13.Future<void> clearPersistence() => (super.noSuchMethod(
        Invocation.method(
          #clearPersistence,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> enablePersistence(
          [_i8.PersistenceSettings? persistenceSettings]) =>
      (super.noSuchMethod(
        Invocation.method(
          #enablePersistence,
          [persistenceSettings],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i8.LoadBundleTask loadBundle(_i41.Uint8List? bundle) => (super.noSuchMethod(
        Invocation.method(
          #loadBundle,
          [bundle],
        ),
        returnValue: _FakeLoadBundleTask_19(
          this,
          Invocation.method(
            #loadBundle,
            [bundle],
          ),
        ),
      ) as _i8.LoadBundleTask);

  @override
  void useFirestoreEmulator(
    String? host,
    int? port, {
    bool? sslEnabled = false,
    bool? automaticHostMapping = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #useFirestoreEmulator,
          [
            host,
            port,
          ],
          {
            #sslEnabled: sslEnabled,
            #automaticHostMapping: automaticHostMapping,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<_i8.QuerySnapshot<T>> namedQueryWithConverterGet<T>(
    String? name, {
    _i8.GetOptions? options = const _i8.GetOptions(),
    required _i8.FromFirestore<T>? fromFirestore,
    required _i8.ToFirestore<T>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedQueryWithConverterGet,
          [name],
          {
            #options: options,
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue:
            _i13.Future<_i8.QuerySnapshot<T>>.value(_FakeQuerySnapshot_14<T>(
          this,
          Invocation.method(
            #namedQueryWithConverterGet,
            [name],
            {
              #options: options,
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        )),
      ) as _i13.Future<_i8.QuerySnapshot<T>>);

  @override
  _i13.Future<_i8.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
    String? name, {
    _i8.GetOptions? options = const _i8.GetOptions(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedQueryGet,
          [name],
          {#options: options},
        ),
        returnValue: _i13.Future<_i8.QuerySnapshot<Map<String, dynamic>>>.value(
            _FakeQuerySnapshot_14<Map<String, dynamic>>(
          this,
          Invocation.method(
            #namedQueryGet,
            [name],
            {#options: options},
          ),
        )),
      ) as _i13.Future<_i8.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i8.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collectionGroup,
          [collectionPath],
        ),
        returnValue: _FakeQuery_13<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collectionGroup,
            [collectionPath],
          ),
        ),
      ) as _i8.Query<Map<String, dynamic>>);

  @override
  _i13.Future<void> disableNetwork() => (super.noSuchMethod(
        Invocation.method(
          #disableNetwork,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i8.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #doc,
          [documentPath],
        ),
        returnValue: _FakeDocumentReference_11<Map<String, dynamic>>(
          this,
          Invocation.method(
            #doc,
            [documentPath],
          ),
        ),
      ) as _i8.DocumentReference<Map<String, dynamic>>);

  @override
  _i13.Future<void> enableNetwork() => (super.noSuchMethod(
        Invocation.method(
          #enableNetwork,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Stream<void> snapshotsInSync() => (super.noSuchMethod(
        Invocation.method(
          #snapshotsInSync,
          [],
        ),
        returnValue: _i13.Stream<void>.empty(),
      ) as _i13.Stream<void>);

  @override
  _i13.Future<T> runTransaction<T>(
    _i8.TransactionHandler<T>? transactionHandler, {
    Duration? timeout = const Duration(seconds: 30),
    int? maxAttempts = 5,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runTransaction,
          [transactionHandler],
          {
            #timeout: timeout,
            #maxAttempts: maxAttempts,
          },
        ),
        returnValue: _i39.ifNotNull(
              _i39.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runTransaction,
                  [transactionHandler],
                  {
                    #timeout: timeout,
                    #maxAttempts: maxAttempts,
                  },
                ),
              ),
              (T v) => _i13.Future<T>.value(v),
            ) ??
            _FakeFuture_20<T>(
              this,
              Invocation.method(
                #runTransaction,
                [transactionHandler],
                {
                  #timeout: timeout,
                  #maxAttempts: maxAttempts,
                },
              ),
            ),
      ) as _i13.Future<T>);

  @override
  _i13.Future<void> terminate() => (super.noSuchMethod(
        Invocation.method(
          #terminate,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> waitForPendingWrites() => (super.noSuchMethod(
        Invocation.method(
          #waitForPendingWrites,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> setIndexConfiguration({
    required List<_i8.Index>? indexes,
    List<_i8.FieldOverrides>? fieldOverrides,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIndexConfiguration,
          [],
          {
            #indexes: indexes,
            #fieldOverrides: fieldOverrides,
          },
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> setIndexConfigurationFromJSON(String? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIndexConfigurationFromJSON,
          [json],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [InternetConnection].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnection extends _i1.Mock
    implements _i42.InternetConnection {
  MockInternetConnection() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get checkInterval => (super.noSuchMethod(
        Invocation.getter(#checkInterval),
        returnValue: _FakeDuration_21(
          this,
          Invocation.getter(#checkInterval),
        ),
      ) as Duration);

  @override
  _i13.Future<bool> get hasInternetAccess => (super.noSuchMethod(
        Invocation.getter(#hasInternetAccess),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<_i42.InternetStatus> get internetStatus => (super.noSuchMethod(
        Invocation.getter(#internetStatus),
        returnValue: _i13.Future<_i42.InternetStatus>.value(
            _i42.InternetStatus.connected),
      ) as _i13.Future<_i42.InternetStatus>);

  @override
  _i13.Stream<_i42.InternetStatus> get onStatusChange => (super.noSuchMethod(
        Invocation.getter(#onStatusChange),
        returnValue: _i13.Stream<_i42.InternetStatus>.empty(),
      ) as _i13.Stream<_i42.InternetStatus>);
}
